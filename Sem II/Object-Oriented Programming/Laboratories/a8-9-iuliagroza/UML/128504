format 224
"repository" // a8-9-iuliagroza::repository
  revision 2
  modified_by 120 "groza"
  // class settings
  
  classdiagramsettings member_max_width 0 end
  
  classcompositediagramsettings end
  
  usecasediagramsettings end
  
  sequencediagramsettings end
  
  collaborationdiagramsettings end
  
  objectdiagramsettings end
  
  objectcompositediagramsettings end
  
  componentdiagramsettings
   end
  
  deploymentdiagramsettings
   end
  
  statediagramsettings
   end
  
  activitydiagramsettings
   end
  
  cpp_h_dir "D:/Moveable-Personal/CS Work/College/Facultate/Sem II/OOP/Laboratories/a8-9-iuliagroza/repository/"
  cpp_src_dir "D:/Moveable-Personal/CS Work/College/Facultate/Sem II/OOP/Laboratories/a8-9-iuliagroza/repository/"
  classview 128248 "repository"
    
    classdiagramsettings member_max_width 0 end
    
    classcompositediagramsettings end
    
    collaborationdiagramsettings end
    
    objectdiagramsettings end
    
    objectcompositediagramsettings end
    
    sequencediagramsettings end
    
    statediagramsettings
     end
    
    
    activitydiagramsettings
     end
    class 128248 "AdminRepository"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      classrelation 128376 // movies (<directional composition>)
	relation 128376 *-->
	  stereotype "std::vector"
	  a role_name "movies" private
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	    classrelation_ref 128376 // movies (<directional composition>)
	  b parent class_ref 128504 // Movie
      end

      attribute 128760 "filename"
	private explicit_type "std::string"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 130552 "AdminRepository"
	preserve_cpp_body_indent public explicit_return_type ""
	nparams 1
	  param in name "filename" explicit_type "std::string"
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${v0}${)}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${typeprefix}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	
	
	
	
	comment "
Constructor
"
      end

      operation 130680 "get_movies"
	preserve_cpp_body_indent public explicit_return_type "std::vector<Movie>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${typeprefix}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${typeprefix}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment "
Getter for the movies list.
"
      end

      operation 130808 "add_movie"
	preserve_cpp_body_indent public explicit_return_type "void"
	nparams 1
	  param in name "movie" type class_ref 128504 // Movie
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${typeprefix}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${typeprefix}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment "
Function that adds a movie in the database. If the movie already exists in the database,
the function will return 0. Otherwise, it will perform the addition and then return 1.
:movie: const pointer to a Movie object
return: bool
"
      end

      operation 130936 "remove_movie"
	preserve_cpp_body_indent public explicit_return_type "void"
	nparams 1
	  param in name "movie" type class_ref 128504 // Movie
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${typeprefix}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${typeprefix}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment "
Function that removes a movie from the database. If the movie does not exist in the database,
the function will return 0. Otherwise, it will perform the removal and then return 1.
:movie: const pointer to a Movie object
return: bool
"
      end

      operation 131064 "update_movie"
	preserve_cpp_body_indent public explicit_return_type "void"
	nparams 2
	  param in name "movie" type class_ref 128504 // Movie
	  param in name "new_movie" type class_ref 128504 // Movie
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${typeprefix}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${typeprefix}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment "
Function that updates a movie from the database. If the movie does not exist in the database,
the function will return 0. Otherwise, it will perform the update_admin and then return 1.
:movie: const pointer to a Movie object
return: bool
"
      end

      operation 131192 "read_from_file"
	preserve_cpp_body_indent private explicit_return_type "std::vector<Movie>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${typeprefix}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${typeprefix}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment "
Function that reads the content of the repo from a .txt file. Used before every operation from the repository.
return: vector of Movie objects
"
      end

      operation 131320 "write_to_file"
	preserve_cpp_body_indent private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${typeprefix}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${typeprefix}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment "
Function that writes the content of the repo in a .txt file. Used after every operation from the repository.
"
      end
    end

    class 128376 "UserRepository"
      abstract visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      classrelation 128760 // watchlist (<directional composition>)
	relation 128760 *-->
	  stereotype "std::vector"
	  a role_name "watchlist" protected
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	    classrelation_ref 128760 // watchlist (<directional composition>)
	  b parent class_ref 128504 // Movie
      end

      attribute 128888 "filename"
	protected explicit_type "std::string"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 132344 "UserRepository"
	preserve_cpp_body_indent public explicit_return_type ""
	nparams 1
	  param in name "filename" explicit_type "std::string"
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${v0}${)}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${typeprefix}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	
	
	
	
	comment "
Constructor
"
      end

      operation 132472 "~UserRepository"
	cpp_virtual cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw}${abstract} {};
"
	
	
	
	
	comment "
Destructor
"
      end

      operation 132600 "get_watchlist"
	preserve_cpp_body_indent public explicit_return_type "std::vector<Movie>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${typeprefix}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${typeprefix}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment "
Getter for the watchlist.
"
      end

      operation 132728 "set_watchlist"
	preserve_cpp_body_indent public explicit_return_type "void"
	nparams 1
	  param in name "new_watchlist" explicit_type "std::vector<Movie>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${typeprefix}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${typeprefix}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 132856 "add_movie"
	preserve_cpp_body_indent public explicit_return_type "void"
	nparams 1
	  param in name "movie" type class_ref 128504 // Movie
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${typeprefix}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${typeprefix}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment "
Function that adds a movie in the watchlist. It performs the addition.
:movie: const pointer to a Movie object
"
      end

      operation 132984 "remove_movie"
	preserve_cpp_body_indent public explicit_return_type "void"
	nparams 1
	  param in name "movie" type class_ref 128504 // Movie
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${typeprefix}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${typeprefix}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment "
Function that removes a movie from the watchlist. If the movie does not exist in the watchlist,
the function will return 0. Otherwise, it will perform the removal and then return 1.
:movie: const pointer to a Movie object
return: bool
"
      end

      operation 133112 "update_movie"
	preserve_cpp_body_indent public explicit_return_type "void"
	nparams 2
	  param in name "movie" type class_ref 128504 // Movie
	  param in name "new_movie" type class_ref 128504 // Movie
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${typeprefix}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${typeprefix}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment "
Function that updates a movie from the watchlist after being updated in the database. It performs the update_admin.
:movie: const pointer to a Movie object
"
      end

      operation 133240 "read_from_file"
	preserve_cpp_body_indent cpp_virtual public explicit_return_type "std::vector<Movie>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${typeprefix}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${typeprefix}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment "
Function that reads the content of the repo from a .txt file. Used before every operation from the repo. It is
virtual, so it can be inherited by CSVUserRepository and HTMLUserRepository.
return: vector of Movie objects
"
      end

      operation 133368 "write_to_file"
	preserve_cpp_body_indent cpp_virtual public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${typeprefix}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${typeprefix}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment "
Function that writes the content of the repo in a .txt file. Used after every operation from the repository. It is
virtual, so it can be inherited by CSVUserRepository and HTMLUserRepository.
"
      end

      operation 133496 "display"
	abstract const cpp_virtual public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${typeprefix}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	
	
	
	
	comment "
Function that displays in Notepad the contents of the .txt file associated to the repository.
"
      end
    end

    class 128632 "CSVUserRepository"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      classrelation 128504 // <generalisation>
	relation 128504 ---|>
	  a public
	    cpp default "${type}"
	    classrelation_ref 128504 // <generalisation>
	  b parent class_ref 128376 // UserRepository
      end

      operation 131448 "CSVUserRepository"
	preserve_cpp_body_indent public explicit_return_type ""
	nparams 1
	  param in name "filename" explicit_type "std::string"
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${v0}${)}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${typeprefix}${class}::${name}${(}const ${t0} & ${p0}${)} : UserRepository(filename) ${throw}{
${body}}
"
	
	
	
	
	comment "
CONSTRUCTOR
"
      end

      operation 131576 "write_to_file"
	preserve_cpp_body_indent cpp_override public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${typeprefix}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${typeprefix}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment "
Overridden .write_from_file() function that writes a .csv file in order to store the instances (of Movie type) of
the repository.
return: vector of Movie objects
"
      end

      operation 131704 "display"
	preserve_cpp_body_indent const cpp_override public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${typeprefix}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${typeprefix}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment "
Overridden .display() function that displays in Notepad the contents of the .csv file associated to the
repository.
return: vector of Movie objects
"
      end
    end

    class 128760 "HTMLUserRepository"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      classrelation 128632 // <generalisation>
	relation 128632 ---|>
	  a public
	    cpp default "${type}"
	    classrelation_ref 128632 // <generalisation>
	  b parent class_ref 128376 // UserRepository
      end

      operation 131832 "HTMLUserRepository"
	preserve_cpp_body_indent public explicit_return_type ""
	nparams 1
	  param in name "filename" explicit_type "std::string"
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${v0}${)}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${typeprefix}${class}::${name}${(}const ${t0} & ${p0}${)} : UserRepository(filename) ${throw}{
${body}}
"
	
	
	
	
	comment "
CONSTRUCTOR
"
      end

      operation 131960 "read_from_file"
	preserve_cpp_body_indent cpp_override public explicit_return_type "std::vector<Movie>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${typeprefix}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${typeprefix}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment "
Overridden .read_from_file() function that parses an HTML file and extracts the information of the objects
(of Movie type) that should be added  into the repository.
return: vector of Movie objects
"
      end

      operation 132088 "write_to_file"
	preserve_cpp_body_indent cpp_override public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${typeprefix}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${typeprefix}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment "
Overridden .write_from_file() function that injects HTML in order to store the instances (of Movie type) of the
repository in the .html file associated to the repository.
return: vector of Movie objects
"
      end

      operation 132216 "display"
	preserve_cpp_body_indent const cpp_override public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${typeprefix}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${typeprefix}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment "
Overridden .display() function that displays in the browser the contents of the .html file associated to the
repository.
return: vector of Movie objects
"
      end
    end
  end

  deploymentview 128376 "repository"
    //deployment diagram settings
    deploymentdiagramsettings
     end
    artifact 128376 "AdminRepository"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_elems
	class_ref 128248 // AdminRepository
      end
    end

    artifact 128504 "CSVUserRepository"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_elems
	class_ref 128632 // CSVUserRepository
      end
    end

    artifact 128632 "HTMLUserRepository"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_elems
	class_ref 128760 // HTMLUserRepository
      end
    end

    artifact 128760 "UserRepository"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_elems
	class_ref 128376 // UserRepository
      end
    end
  end
end
