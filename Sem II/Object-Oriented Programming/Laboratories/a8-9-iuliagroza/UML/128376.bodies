class UserRepository
!!!132344.cpp!!!	UserRepository(in filename : std::string)

    this->filename = filename;
!!!132600.cpp!!!	get_watchlist() : std::vector<Movie>

    return this->watchlist;
!!!132728.cpp!!!	set_watchlist(in new_watchlist : std::vector<Movie>) : void

    this->watchlist = new_watchlist;
!!!132856.cpp!!!	add_movie(in movie : Movie) : void

    this->watchlist = read_from_file();

    this->watchlist.push_back(movie);

    write_to_file();
!!!132984.cpp!!!	remove_movie(in movie : Movie) : void

    this->watchlist = read_from_file();

    std::vector<Movie>::iterator it = find(this->watchlist.begin(), this->watchlist.end(), movie);
    if (it == this->watchlist.end()) {
        throw OperationError("The movie you provided is not in your watchlist.");
    }

    this->watchlist.erase(it);

    write_to_file();
!!!133112.cpp!!!	update_movie(in movie : Movie, in new_movie : Movie) : void

    this->watchlist = read_from_file();

    std::vector<Movie>::iterator it = find(this->watchlist.begin(), this->watchlist.end(), movie);
    if (it != this->watchlist.end()) {
        *it = new_movie;
    }

    write_to_file();
!!!133240.cpp!!!	read_from_file() : std::vector<Movie>

    std::ifstream file(this->filename);
    if (!file.is_open()) {
        throw FileError("The file could not be open.");
    }
    std::vector<Movie> new_watchlist;

    Movie movie;
    while (file >> movie) {
        new_watchlist.push_back(movie);
    }

    file.close();
    return new_watchlist;
!!!133368.cpp!!!	write_to_file() : void

    std::ofstream file(this->filename);
    if (!file.is_open())
        throw FileError("The file could not be open.");
    for (auto movie : this->watchlist)
    {
        file << movie;
    }
    file.close();
