class AdminRepository
!!!130552.cpp!!!	AdminRepository(in filename : std::string)

    this->filename = filename;
    this->movies = read_from_file();
!!!130680.cpp!!!	get_movies() : std::vector<Movie>

    return this->movies;
!!!130808.cpp!!!	add_movie(in movie : Movie) : void

    this->movies = read_from_file();

    std::vector<Movie>::iterator it = find(this->movies.begin(), this->movies.end(), movie);
    if (it != this->movies.end()) {
        throw OperationError("The movie you provided already exists in the database.");
    }
    this->movies.push_back(movie);

    write_to_file();
!!!130936.cpp!!!	remove_movie(in movie : Movie) : void

    this->movies = read_from_file();

    std::vector<Movie>::iterator it = find(this->movies.begin(), this->movies.end(), movie);
    if (it == this->movies.end()) {
        throw OperationError("The movie you provided does not exist in the database.");
    }

    this->movies.erase(it);

    write_to_file();
!!!131064.cpp!!!	update_movie(in movie : Movie, in new_movie : Movie) : void

    this->movies = read_from_file();

    std::vector<Movie>::iterator it = find(this->movies.begin(), this->movies.end(), movie);
    if (it == this->movies.end()) {
        throw OperationError("The movie you provided does not exist in the database.");
    }

    *it = new_movie;

    write_to_file();
!!!131192.cpp!!!	read_from_file() : std::vector<Movie>

    std::ifstream file(this->filename);

    if (!file.is_open()) {
        throw FileError("The file could not be open.");
    }

    std::vector<Movie> new_movies;
    Movie movie;
    while (file >> movie) {
        new_movies.push_back(movie);
    }

    file.close();
    return new_movies;
!!!131320.cpp!!!	write_to_file() : void

    std::ofstream file(this->filename);
    if (!file.is_open())
        throw FileError("The file could not be open.");
    for (auto movie: this->movies) {
        file << movie;
    }
    file.close();
