        -:    0:Source:D:/Moveable-Personal/CS Work/College/Facultate/Sem II/OOP/Laboratories/a5-6-iuliagroza/utils/DynamicArray.h
        -:    0:Graph:D:\Moveable-Personal\CS Work\College\Facultate\Sem II\OOP\Laboratories\a5-6-iuliagroza\cmake-build-debug-coverage\CMakeFiles\a5_6_iuliagroza.dir\repository\UserRepository.cpp.gcno
        -:    0:Data:D:\Moveable-Personal\CS Work\College\Facultate\Sem II\OOP\Laboratories\a5-6-iuliagroza\cmake-build-debug-coverage\CMakeFiles\a5_6_iuliagroza.dir\repository\UserRepository.cpp.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#ifndef A5_6_IULIAGROZA_DYNAMICARRAY_H
        -:    2:#define A5_6_IULIAGROZA_DYNAMICARRAY_H
        -:    3:
        -:    4:#include "../domain/Movie.h"
        -:    5:
        -:    6:template<typename T>
        -:    7:class DynamicArray {
        -:    8:public:
        -:    9:    /*
        -:   10:     * Default constructor
        -:   11:     */
        -:   12:    DynamicArray(int capacity = 10);
        -:   13:
        -:   14:    /*
        -:   15:     * Copy by reference constructor
        -:   16:     */
        -:   17:    DynamicArray(const DynamicArray &v);
        -:   18:
        -:   19:    /*
        -:   20:     * Destructor
        -:   21:     */
        -:   22:    ~DynamicArray();
        -:   23:
        -:   24:private:
        -:   25:    T *elems;
        -:   26:    int size;
        -:   27:    int capacity;
        -:   28:
        -:   29:public:
        -:   30:    /*
        -:   31:     * Operator that facilitates the assignment of a DynamicArray object to another DynamicArray
        -:   32:     * object by reference.
        -:   33:     */
        -:   34:    DynamicArray &operator=(const DynamicArray &v);
        -:   35:
        -:   36:    /*
        -:   37:     * GETTERS
        -:   38:     */
        -:   39:    int get_size() const;
        -:   40:
        -:   41:    T get_element(int pos);
        -:   42:
        -:   43:    /*
        -:   44:     * Function that implements the addition functionality. If the size of the array reaches its capacity,
        -:   45:     * the array will be resized (the capacity will double by default).
        -:   46:     * :e: const reference to a TElement element (object)
        -:   47:     */
        -:   48:    void add(const T &e);
        -:   49:
        -:   50:    /*
        -:   51:     * Function that implements the removal functionality. The deleted element will be deallocated.
        -:   52:     * :pos: positive integer (smaller than the size of the array)
        -:   53:     */
        -:   54:    void remove(int pos);
        -:   55:
        -:   56:    /*
        -:   57:     * Function that implements the removal functionality. It will use the custom assignment operator.
        -:   58:     * :pos: positive integer (smaller than the size of the array)
        -:   59:     * :new_e: const reference to a TElement element (object)
        -:   60:     */
        -:   61:    void update(int pos, const T &new_e);
        -:   62:
        -:   63:private:
        -:   64:    /*
        -:   65:     * Resize function that by default doubles the capacity of the array when its size reaches its capacity.
        -:   66:     * :factor: positive integer (by default 2)
        -:   67:     */
        -:   68:    void resize(int factor = 2);
        -:   69:};
        -:   70:
        -:   71:template<typename T>
        -:   72:DynamicArray<T>::DynamicArray(int capacity) {
        -:   73:    this->size = 0;
        -:   74:    this->capacity = capacity;
        -:   75:    this->elems = new T[capacity];
        -:   76:}
        -:   77:
        -:   78:template<typename T>
function _ZN12DynamicArrayI5MovieEC1ERKS1_ called 0 returned 0% blocks executed 0%
    #####:   79:DynamicArray<T>::DynamicArray(const DynamicArray<T> &v) {
    #####:   80:    this->size = v.size;
    #####:   81:    this->capacity = v.capacity;
    #####:   82:    this->elems = new T[this->capacity];
    %%%%%:   82-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:   82-block  1
    %%%%%:   82-block  2
    %%%%%:   82-block  3
call    2 never executed
    %%%%%:   82-block  4
branch  3 never executed
branch  4 never executed
    %%%%%:   82-block  5
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%:   82-block  6
    $$$$$:   82-block  7
    $$$$$:   82-block  8
call    8 never executed
    $$$$$:   82-block  9
branch  9 never executed
branch 10 never executed
    $$$$$:   82-block 10
    $$$$$:   82-block 11
    $$$$$:   82-block 12
call   11 never executed
    #####:   83:    for (int i = 0; i < this->size; i++)
    %%%%%:   83-block  0
    %%%%%:   83-block  1
branch  0 never executed
branch  1 never executed
    #####:   84:        this->elems[i] = v.elems[i];
    %%%%%:   84-block  0
call    0 never executed
    #####:   85:}
    %%%%%:   85-block  0
        -:   86:
        -:   87:template<typename T>
        -:   88:DynamicArray<T>::~DynamicArray() {
        -:   89:    delete[] this->elems;
        -:   90:}
        -:   91:
        -:   92:template<typename T>
        -:   93:DynamicArray<T> &DynamicArray<T>::operator=(const DynamicArray<T> &v) {
        -:   94:    if (this == &v)
        -:   95:        return *this;
        -:   96:
        -:   97:    this->size = v.size;
        -:   98:    this->capacity = v.capacity;
        -:   99:
        -:  100:    delete[] this->elems;
        -:  101:    this->elems = new T[this->capacity];
        -:  102:    for (int i = 0; i < this->size; i++)
        -:  103:        this->elems[i] = v.elems[i];
        -:  104:
        -:  105:    return *this;
        -:  106:}
        -:  107:
        -:  108:template<typename T>
function _ZNK12DynamicArrayI5MovieE8get_sizeEv called 0 returned 0% blocks executed 0%
    #####:  109:int DynamicArray<T>::get_size() const {
    #####:  110:    return this->size;
    %%%%%:  110-block  0
        -:  111:}
        -:  112:
        -:  113:template<typename T>
function _ZN12DynamicArrayI5MovieE11get_elementEi called 0 returned 0% blocks executed 0%
    #####:  114:T DynamicArray<T>::get_element(int pos) {
    #####:  115:    return this->elems[pos];
    %%%%%:  115-block  0
call    0 never executed
        -:  116:}
        -:  117:
        -:  118:template<typename T>
function _ZN12DynamicArrayI5MovieE3addERKS0_ called 0 returned 0% blocks executed 0%
    #####:  119:void DynamicArray<T>::add(const T &e) {
    #####:  120:    if (this->size == this->capacity)
    %%%%%:  120-block  0
branch  0 never executed
branch  1 never executed
    #####:  121:        this->resize();
    %%%%%:  121-block  0
call    0 never executed
    #####:  122:    this->elems[this->size] = e;
    %%%%%:  122-block  0
call    0 never executed
    #####:  123:    this->size++;
    #####:  124:}
        -:  125:
        -:  126:template<typename T>
function _ZN12DynamicArrayI5MovieE6removeEi called 0 returned 0% blocks executed 0%
    #####:  127:void DynamicArray<T>::remove(int pos) {
    #####:  128:    for (int i = pos; i < this->size - 1; i++) {
    %%%%%:  128-block  0
    %%%%%:  128-block  1
branch  0 never executed
branch  1 never executed
    #####:  129:        this->elems[i] = this->elems[i + 1];
    %%%%%:  129-block  0
call    0 never executed
        -:  130:    }
    #####:  131:    this->size--;
    #####:  132:}
        -:  133:
        -:  134:template<typename T>
function _ZN12DynamicArrayI5MovieE6updateEiRKS0_ called 0 returned 0% blocks executed 0%
    #####:  135:void DynamicArray<T>::update(int pos, const T &new_e) {
    #####:  136:    this->elems[pos] = new_e;
    %%%%%:  136-block  0
call    0 never executed
    #####:  137:}
        -:  138:
        -:  139:template<typename T>
function _ZN12DynamicArrayI5MovieE6resizeEi called 0 returned 0% blocks executed 0%
    #####:  140:void DynamicArray<T>::resize(int factor) {
    #####:  141:    this->capacity *= factor;
        -:  142:
    #####:  143:    auto *els = new T[this->capacity];
    %%%%%:  143-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:  143-block  1
    %%%%%:  143-block  2
    %%%%%:  143-block  3
call    2 never executed
    %%%%%:  143-block  4
branch  3 never executed
branch  4 never executed
    %%%%%:  143-block  5
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%:  143-block  6
    $$$$$:  143-block  7
    $$$$$:  143-block  8
call    8 never executed
    $$$$$:  143-block  9
branch  9 never executed
branch 10 never executed
    $$$$$:  143-block 10
    $$$$$:  143-block 11
    $$$$$:  143-block 12
call   11 never executed
    #####:  144:    for (int i = 0; i < this->size; i++)
    %%%%%:  144-block  0
    %%%%%:  144-block  1
branch  0 never executed
branch  1 never executed
    #####:  145:        els[i] = this->elems[i];
    %%%%%:  145-block  0
call    0 never executed
        -:  146:
    #####:  147:    delete[] this->elems;
    %%%%%:  147-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:  147-block  1
    %%%%%:  147-block  2
branch  2 never executed
branch  3 never executed
    %%%%%:  147-block  3
call    4 never executed
    %%%%%:  147-block  4
call    5 never executed
    #####:  148:    this->elems = els;
    #####:  149:}
    %%%%%:  149-block  0
        -:  150:
        -:  151:#endif
