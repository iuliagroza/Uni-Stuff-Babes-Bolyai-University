0. se da programul (cu enuntul "sa se citeasca 10 numere de la tastatura):

#include <stdio.h>

int main()
{
    int i;
    int* x;

    for (i = 0; i <=10; i++)
    {
        scanf("%d", &x[i]);
    }
    return 0;
}

01: gcc -o test test.c
02: ./test
	Segmentation fault (core dumped)
03: gdb ./test (r, bt); nu se vede locatia din fisier care cauzeaza problema
04: gcc -o test test.c -g
05: gdb ./test (r, bt): se vede locatia: in main() at test.c:10
06: compilare cu -Wall -Werror
	test.c: In function ‘main’:
	test.c:11:2: warning: ‘x’ may be used uninitialized in this function [-Wmaybe-uninitialized]
	  scanf("%d", &x[i]);
06: int* x = malloc(10);
07: gcc -o test test.c
	test.c:6:14: note: include ‘<stdlib.h>’ or provide a declaration of ‘malloc’
08: se adauga #include <stdlib.h> si se recompileaza
09: nu se citesc toate valorile, de ce?
10: se ruleaza cu gdb din nou, acelasi rezultat, nu aflam nimic in plus
11: valgrind ./test
	1
	2
	3
	==1013== Invalid write of size 4
	==1013==    at 0x4E99DE5: _IO_vfscanf (vfscanf.c:1902)
	==1013==    by 0x4EA55DE: __isoc99_scanf (isoc99_scanf.c:37)
	==1013==    by 0x4005DA: main (test.c:11)				<------ aici are loc overflow (heap corruption)
	==1013==  Address 0x5204048 is 8 bytes inside a block of size 10 alloc'd
	==1013==    at 0x4C2DB8F: malloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
	==1013==    by 0x4005A7: main (test.c:7)				<------ aici e alocat bufferul in heap
12: problema e ca am alocat 10 bytes, nu 10 * sizeof(int)
13: recompilare si rulare cu valgrind
	==1021== Invalid write of size 4
	==1021==    at 0x4E99DE5: _IO_vfscanf (vfscanf.c:1902)
	==1021==    by 0x4EA55DE: __isoc99_scanf (isoc99_scanf.c:37)
	==1021==    by 0x4005DA: main (test.c:11)
	==1021==  Address 0x5204068 is 0 bytes after a block of size 40 alloc'd
	==1021==    at 0x4C2DB8F: malloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
	==1021==    by 0x4005A7: main (test.c:7)
14: problema e la for (i = 0; i <=10; i++)
15: recompilare si rulare (aflam ca avem un leak, dar nu stim de unde)
	==1021==
	==1021==
	==1021== HEAP SUMMARY:
	==1021==     in use at exit: 40 bytes in 1 blocks
	==1021==   total heap usage: 2 allocs, 1 frees, 552 bytes allocated
	==1021==
	==1021== LEAK SUMMARY:
	==1021==    definitely lost: 40 bytes in 1 blocks
	==1021==    indirectly lost: 0 bytes in 0 blocks
	==1021==      possibly lost: 0 bytes in 0 blocks
	==1021==    still reachable: 0 bytes in 0 blocks
	==1021==         suppressed: 0 bytes in 0 blocks
	==1021== Rerun with --leak-check=full to see details of leaked memory
16: valgrind --leak-check=full ./test
	==1032== HEAP SUMMARY:
	==1032==     in use at exit: 40 bytes in 1 blocks
	==1032==   total heap usage: 2 allocs, 1 frees, 552 bytes allocated
	==1032==
	==1032== 40 bytes in 1 blocks are definitely lost in loss record 1 of 1
	==1032==    at 0x4C2DB8F: malloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
	==1032==    by 0x4005A7: main (test.c:7)
	==1032==
	==1032== LEAK SUMMARY:
	==1032==    definitely lost: 40 bytes in 1 blocks
	==1032==    indirectly lost: 0 bytes in 0 blocks
	==1032==      possibly lost: 0 bytes in 0 blocks
	==1032==    still reachable: 0 bytes in 0 blocks
	==1032==         suppressed: 0 bytes in 0 blocks
17: free(x);


2. Sa se scrie un progam C sub UNIX care citeste un sir de numere de la
tastatura si tipareste minimul, maximul si media lor aritmetica.

#include<stdio.h>

int main() {
    int a[100];
    int n;
    int i;
    int min;
    int max;
    float avg;

    printf("Dati lungimea sirului: ");
    scanf("%d", &n);

    if(n > 100) {
        printf("Lungimea sirului poate fi amximum 100\n");
        return 1;
    }

    for(i=0; i<n; i++) {
        printf("Dati elementul %d: ", i+1);
        scanf("%d", &(a[i]));
    }

    min = a[0];
    max = a[0];
    avg = a[0];
    for(i=1; i<n; i++) {
        if(a[i] < min) {
            min = a[i];
        }
        if(a[i] > max) {
            max = a[i];
        }
        avg += a[i];
    }
    avg = avg/n;

    printf("MIN: %d\n", min);
    printf("MAX: %d\n", max);
    printf("AVG: %f\n", avg);

    return 0;
}

3. Sa se citeasca un numar N de la tastatura, apoi N cuvinte de maxim 10 de litere. Sa se afiseze cuvintele ordonate alfabetic.
sugestii: char**, malloc(), gets()